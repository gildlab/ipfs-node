version: '3'

services:
  gl_ipfs:
    container_name: gl_ipfs
    image: gildlab/ipfs-node:ipfs
    restart: always
    # https://docs.ipfs.tech/how-to/run-ipfs-inside-docker/#set-up
    ports:
      - "127.0.0.1:5001:5001"
      - "127.0.0.1:8080:8080"
      - "4001:4001"
      - "4001:4001/udp"
    volumes:
      - ${GILDLAB_IPFS_NODE_BASE_PATH}/volumes/ipfs/data/ipfs:/data/ipfs
      - ${GILDLAB_IPFS_NODE_BASE_PATH}/volumes/ipfs/export:/export
    env_file:
      - ${GILDLAB_IPFS_NODE_BASE_PATH}/.env

  gl_nginx:
    container_name: gl_nginx
    image: gildlab/ipfs-node:nginx
    restart: always
    ports:
      - "80"
    depends_on:
      gl_ipfs:
        condition: service_healthy

  # ngrok:
  #   container_name: gl_ngrok
  #   image: gildlab/ipfs-node:ngrok
  #   restart: always
  #   environment:
  #     - NGROK_AUTH=${NGROK_AUTH}
  #     - NGROK_PROTOCOL=http
  #     - NGROK_PORT=nginx:80
  #     - NGROK_REGION=${NGROK_REGION}
  #     - NGROK_HOSTNAME=${NGROK_HOSTNAME}
  #   depends_on:
  #     - nginx

  gl_pin:
    container_name: gl_pin
    image: gildlab/ipfs-node:pin
    restart: always
    depends_on:
      gl_ipfs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nix-shell", "/pin.sh"]
      interval: 30s
      timeout: 60m

  gl_ngrok_ipfs:
    container_name: gl_ngrok_ipfs
    image: gildlab/ipfs-node:ngrok
    restart: always
    entrypoint: ngrok tunnel --region=us --label edge=${NGROK_EDGE} --log=stdout gl_ipfs:4001
    env_file:
      - ${GILDLAB_IPFS_NODE_BASE_PATH}/.env

    depends_on:
      gl_ipfs:
        condition: service_healthy

  # ngrok_api:
  #   container_name: gl_ngrok_api
  #   image: ngrok/ngrok
  #   restart: always
  #   entrypoint: ngrok --region="${NGROK_REGION}" --hostname=${NGROK_HOSTNAME} http ${NGROK_PORT}
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTH}
  #     - NGROK_REGION=${NGROK_REGION}
  #     - NGROK_HOSTNAME=${NGROK_HOSTNAME}
  #     - NGROK_PORT=nginx:80
  #   depends_on:
  #     - nginx
  